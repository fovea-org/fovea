import {DIContainer} from "@wessberg/di";
import {FoveaDOM, IFoveaDOM} from "@fovea/dom";
import {CodeAnalyzer, ICodeAnalyzer} from "@wessberg/codeanalyzer";
import {FoveaCompilerBase} from "./fovea-compiler/fovea-compiler-base";
import {ITemplator} from "./templator/i-templator";
import {Templator} from "./templator/templator";
import {IConfiguration} from "./configuration/i-configuration";
import {configuration} from "./configuration/configuration";
import {IPrototypeExtender} from "./prototype-extender/i-prototype-extender";
import {PrototypeExtender} from "./prototype-extender/prototype-extender";
import {ILibUser} from "./lib-user/i-lib-user";
import {LibUser} from "./lib-user/lib-user";
import {IFoveaHostMarker} from "./fovea-marker/i-fovea-host-marker";
import {FoveaHostMarker} from "./fovea-marker/fovea-host-marker";
import {IFoveaHostDefiner} from "./fovea-host-definer/i-fovea-host-definer";
import {FoveaHostDefiner} from "./fovea-host-definer/fovea-host-definer";
import {IFoveaHostUtil} from "./util/fovea-host-util/i-fovea-host-util";
import {FoveaHostUtil} from "./util/fovea-host-util/fovea-host-util";
import {IModuleUtil, ModuleUtil} from "@wessberg/moduleutil";
import {IPropExtractor} from "./prop-extractor/i-prop-extractor";
import {PropExtractor} from "./prop-extractor/prop-extractor";
import {ISetOnHostExtractor} from "./set-on-host-extractor/i-set-on-host-extractor";
import {SetOnHostExtractor} from "./set-on-host-extractor/set-on-host-extractor";
import {IPropertiesToAttributesMapper} from "./properties-to-attributes-mapper/i-properties-to-attributes-mapper";
import {PropertiesToAttributesMapper} from "./properties-to-attributes-mapper/properties-to-attributes-mapper";
import {IFoveaCompilerBase} from "./fovea-compiler/i-fovea-compiler-base";
import {ITypescriptASTUtil, TypescriptASTUtil} from "@wessberg/typescript-ast-util";
import {IEmitExtractor} from "./emit-extractor/i-emit-extractor";
import {EmitExtractor} from "./emit-extractor/emit-extractor";
import {IHostListenerExtractor} from "./host-listener-extractor/i-host-listener-extractor";
import {HostListenerExtractor} from "./host-listener-extractor/host-listener-extractor";
import {IFoveaStats} from "./stats/i-fovea-stats";
import {FoveaStats} from "./stats/fovea-stats";
import {IOnChangeExtractor} from "./on-change-extractor/i-on-change-extractor";
import {OnChangeExtractor} from "./on-change-extractor/on-change-extractor";
import {IVisibilityObserverExtractor} from "./visibility-observer-extractor/i-visibility-observer-extractor";
import {VisibilityObserverExtractor} from "./visibility-observer-extractor/visibility-observer-extractor";
import {FoveaStyles, IFoveaStyles} from "@fovea/style";
import {IDependencyImporter} from "./dependency-importer/i-dependency-importer";
import {DependencyImporter} from "./dependency-importer/dependency-importer";
import {IFoveaDiagnostics} from "./diagnostics/i-fovea-diagnostics";
import {FoveaDiagnostics} from "./diagnostics/fovea-diagnostics";
import {IPathUtil, PathUtil} from "@wessberg/pathutil";
import {IContainerConstructor} from "./container/i-container";
import {Container} from "./container/container";
import {IHashUtil} from "./util/hash-util/i-hash-util";
import {HashUtil} from "./util/hash-util/hash-util";
import {ICompilerFlagsExtender} from "./compiler-flags-extender/i-compiler-flags-extender";
import {CompilerFlagsExtender} from "./compiler-flags-extender/compiler-flags-extender";
import {ITypeExtractorService} from "./type-extractor/i-type-extractor-service";
import {TypeExtractorService} from "./type-extractor/type-extractor-service";
import {IHostAttributesExtractor} from "./host-attributes-extractor/i-host-attributes-extractor";
import {HostAttributesExtractor} from "./host-attributes-extractor/host-attributes-extractor";
import {IChildListObserverExtractor} from "./child-list-observer-extractor/i-child-list-observer-extractor";
import {ChildListObserverExtractor} from "./child-list-observer-extractor/child-list-observer-extractor";
import {IOnAttributeChangeExtractor} from "./on-attribute-change-extractor/i-on-attribute-change-extractor";
import {OnAttributeChangeExtractor} from "./on-attribute-change-extractor/on-attribute-change-extractor";

export const container = new DIContainer();

container.registerSingleton<IFoveaHostMarker, FoveaHostMarker>();
container.registerSingleton<ICompilerFlagsExtender, CompilerFlagsExtender>();
container.registerSingleton<IDependencyImporter, DependencyImporter>();
container.registerSingleton<IPropExtractor, PropExtractor>();
container.registerSingleton<IHostListenerExtractor, HostListenerExtractor>();
container.registerSingleton<IOnAttributeChangeExtractor, OnAttributeChangeExtractor>();
container.registerSingleton<IOnChangeExtractor, OnChangeExtractor>();
container.registerSingleton<ITypeExtractorService, TypeExtractorService>();
container.registerSingleton<IVisibilityObserverExtractor, VisibilityObserverExtractor>();
container.registerSingleton<IChildListObserverExtractor, ChildListObserverExtractor>();
container.registerSingleton<IHostAttributesExtractor, HostAttributesExtractor>();
container.registerSingleton<IEmitExtractor, EmitExtractor>();
container.registerSingleton<ISetOnHostExtractor, SetOnHostExtractor>();
container.registerSingleton<IPropertiesToAttributesMapper, PropertiesToAttributesMapper>();
container.registerSingleton<IFoveaHostDefiner, FoveaHostDefiner>();
container.registerSingleton<ILibUser, LibUser>();
container.registerSingleton<IConfiguration, IConfiguration>(() => configuration);
container.registerSingleton<IFoveaStats, FoveaStats>();
container.registerSingleton<IFoveaDiagnostics, FoveaDiagnostics>();
container.registerSingleton<IPrototypeExtender, PrototypeExtender>();
container.registerSingleton<ITemplator, Templator>();
container.registerSingleton<ICodeAnalyzer, CodeAnalyzer>();
container.registerSingleton<IFoveaDOM, FoveaDOM>();
container.registerSingleton<IFoveaStyles, FoveaStyles>();
container.registerSingleton<IFoveaCompilerBase, FoveaCompilerBase>();
container.registerSingleton<IFoveaHostUtil, FoveaHostUtil>();
container.registerSingleton<IModuleUtil, ModuleUtil>();
container.registerSingleton<ITypescriptASTUtil, TypescriptASTUtil>();
container.registerSingleton<IPathUtil, PathUtil>();
container.registerSingleton<IHashUtil, HashUtil>();
container.registerSingleton<IContainerConstructor, IContainerConstructor>(() => Container);

// Sets additional options on the IModuleUtil. It may also resolve HTML, CSS and SCSS files
container.get<IModuleUtil>().setOptions({extraExtensions: [".html", ".css", ".scss"]});